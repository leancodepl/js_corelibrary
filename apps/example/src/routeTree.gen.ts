/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as VerificationImport } from './routes/verification'
import { Route as SettingsImport } from './routes/settings'
import { Route as RegistrationImport } from './routes/registration'
import { Route as RecoveryImport } from './routes/recovery'
import { Route as LogoutImport } from './routes/logout'
import { Route as LoginImport } from './routes/login'

// Create/Update Routes

const VerificationRoute = VerificationImport.update({
  id: '/verification',
  path: '/verification',
  getParentRoute: () => rootRoute,
} as any)

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const RegistrationRoute = RegistrationImport.update({
  id: '/registration',
  path: '/registration',
  getParentRoute: () => rootRoute,
} as any)

const RecoveryRoute = RecoveryImport.update({
  id: '/recovery',
  path: '/recovery',
  getParentRoute: () => rootRoute,
} as any)

const LogoutRoute = LogoutImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutImport
      parentRoute: typeof rootRoute
    }
    '/recovery': {
      id: '/recovery'
      path: '/recovery'
      fullPath: '/recovery'
      preLoaderRoute: typeof RecoveryImport
      parentRoute: typeof rootRoute
    }
    '/registration': {
      id: '/registration'
      path: '/registration'
      fullPath: '/registration'
      preLoaderRoute: typeof RegistrationImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/verification': {
      id: '/verification'
      path: '/verification'
      fullPath: '/verification'
      preLoaderRoute: typeof VerificationImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/recovery': typeof RecoveryRoute
  '/registration': typeof RegistrationRoute
  '/settings': typeof SettingsRoute
  '/verification': typeof VerificationRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/recovery': typeof RecoveryRoute
  '/registration': typeof RegistrationRoute
  '/settings': typeof SettingsRoute
  '/verification': typeof VerificationRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/recovery': typeof RecoveryRoute
  '/registration': typeof RegistrationRoute
  '/settings': typeof SettingsRoute
  '/verification': typeof VerificationRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/logout'
    | '/recovery'
    | '/registration'
    | '/settings'
    | '/verification'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/logout' | '/recovery' | '/registration' | '/settings' | '/verification'
  id:
    | '__root__'
    | '/login'
    | '/logout'
    | '/recovery'
    | '/registration'
    | '/settings'
    | '/verification'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LoginRoute: typeof LoginRoute
  LogoutRoute: typeof LogoutRoute
  RecoveryRoute: typeof RecoveryRoute
  RegistrationRoute: typeof RegistrationRoute
  SettingsRoute: typeof SettingsRoute
  VerificationRoute: typeof VerificationRoute
}

const rootRouteChildren: RootRouteChildren = {
  LoginRoute: LoginRoute,
  LogoutRoute: LogoutRoute,
  RecoveryRoute: RecoveryRoute,
  RegistrationRoute: RegistrationRoute,
  SettingsRoute: SettingsRoute,
  VerificationRoute: VerificationRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/login",
        "/logout",
        "/recovery",
        "/registration",
        "/settings",
        "/verification"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/logout": {
      "filePath": "logout.tsx"
    },
    "/recovery": {
      "filePath": "recovery.tsx"
    },
    "/registration": {
      "filePath": "registration.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/verification": {
      "filePath": "verification.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
