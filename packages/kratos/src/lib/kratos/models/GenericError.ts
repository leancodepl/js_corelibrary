/* tslint:disable */
/* eslint-disable */
/**
 * Ory Identities API
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * The version of the OpenAPI document: v1.3.1
 * Contact: office@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface GenericError
 */
export interface GenericError {
    /**
     * The status code
     * @type {number}
     * @memberof GenericError
     */
    code?: number;
    /**
     * Debug information
     * 
     * This field is often not exposed to protect against leaking
     * sensitive information.
     * @type {string}
     * @memberof GenericError
     */
    debug?: string;
    /**
     * Further error details
     * @type {object}
     * @memberof GenericError
     */
    details?: object;
    /**
     * The error ID
     * 
     * Useful when trying to identify various errors in application logic.
     * @type {string}
     * @memberof GenericError
     */
    id?: string;
    /**
     * Error message
     * 
     * The error's message.
     * @type {string}
     * @memberof GenericError
     */
    message: string;
    /**
     * A human-readable reason for the error
     * @type {string}
     * @memberof GenericError
     */
    reason?: string;
    /**
     * The request ID
     * 
     * The request ID is often exposed internally in order to trace
     * errors across service architectures. This is often a UUID.
     * @type {string}
     * @memberof GenericError
     */
    request?: string;
    /**
     * The status description
     * @type {string}
     * @memberof GenericError
     */
    status?: string;
}

/**
 * Check if a given object implements the GenericError interface.
 */
export function instanceOfGenericError(value: object): value is GenericError {
    if (!('message' in value) || value['message'] === undefined) return false;
    return true;
}

export function GenericErrorFromJSON(json: any): GenericError {
    return GenericErrorFromJSONTyped(json, false);
}

export function GenericErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): GenericError {
    if (json == null) {
        return json;
    }
    return {
        
        'code': json['code'] == null ? undefined : json['code'],
        'debug': json['debug'] == null ? undefined : json['debug'],
        'details': json['details'] == null ? undefined : json['details'],
        'id': json['id'] == null ? undefined : json['id'],
        'message': json['message'],
        'reason': json['reason'] == null ? undefined : json['reason'],
        'request': json['request'] == null ? undefined : json['request'],
        'status': json['status'] == null ? undefined : json['status'],
    };
}

export function GenericErrorToJSON(value?: GenericError | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'code': value['code'],
        'debug': value['debug'],
        'details': value['details'],
        'id': value['id'],
        'message': value['message'],
        'reason': value['reason'],
        'request': value['request'],
        'status': value['status'],
    };
}

