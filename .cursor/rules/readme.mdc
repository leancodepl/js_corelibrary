---
globs: README.md
alwaysApply: false
---
# AI Rules for Creating Package READMEs

## 1. README Structure
```markdown
# Package Name - Brief functional description (1-2 sentences)
## Installation - Standard npm/yarn commands  
## API - Function docs from JSDoc
## Usage Examples - Real-world scenarios by category
## Features/Configuration (if applicable)
```

## 2. JSDoc Requirements

**Always add JSDoc to ALL exported functions and classes:**
```typescript
/**
 * Action verb description (1 sentence). Optional context.
 * 
 * @template T - Generic description (if applicable)
 * @param name - Purpose and usage
 * @param optional - Optional parameter description  
 * @returns Return value description
 * @throws {Error} When/why error occurs (if applicable)
 * @example
 * ```typescript
 * const result = func(input);
 * ```
 */
```

**For classes, always document constructor parameters:**
```typescript
/**
 * Manages authentication with token storage.
 * 
 * @param storage - Token storage implementation
 * @param endpoint - API server endpoint
 * @param clientId - OAuth2 client identifier
 * @example
 * ```typescript
 * const manager = new AuthManager(storage, 'https://api.example.com', 'client_id');
 * ```
 */
export class AuthManager {
  constructor(storage: TokenStorage, endpoint: string, clientId: string) {}
}
```

**Standards:**
- Start with action verbs ("Converts", "Ensures", "Creates")
- Be specific about behavior and side effects
- Use simple, direct language - avoid marketing terms
- Include practical @example blocks
- Document generics and error conditions
- Wrap library names in quotes: `"@leancodepl/pipe"` not `@leancodepl/pipe`
- **Always document constructor parameters:** Include @param for ALL constructor parameters in class JSDoc
- **Always explicitly list all parameters:** Never reference other functions (e.g., avoid "Same parameters as mkCqrsClient")
## 3. API Section (Auto-generated from JSDoc)

**Function Headers:**
```markdown
### `functionName(param1, param2, optional)`
```
- Include ALL parameter names (no types in header)
- Empty parentheses `()` for parameterless functions

**Content Mapping:**
- Description: First sentence from JSDoc
- Parameters: Map @param with full types
- Returns: Map @returns (if meaningful)
- **Exclude @template** - Do not include template parameter documentation in README

## 4. Usage Examples

**Organization:** Group by functionality, common use cases first

**Quality Rules:**
- Use realistic data (no `foo`, `bar`)
- **Concise and compilable** - focus on demonstrating function
- **Real-world scenarios** developers actually encounter
- **Standard libraries only** (React, Node.js built-ins)
- **Include all necessary imports** - every example must have required import statements
- Runnable without unknown dependencies
- **No peer dependencies sections** - avoid listing installation commands for peer deps

**Conciseness Guidelines:**
- **Remove wrapper functions** - show direct usage, not complex implementations
- **Simplify data structures** - use minimal realistic data
- **Streamline handlers** - prefer `console.log()` over verbose logic
- **Reduce line count** - aim for ~5-10 lines per example, not 20+
- **One concept per example** - don't combine multiple features
- **Direct variable assignment** - avoid unnecessary intermediate steps

## 5. Documentation Standards

**Types:** Full TypeScript types, generic constraints, optional indicators
**Overloads:** Document separately with clear distinctions
**React Hooks:** Always document return tuple/object structure
**Errors:** Include @throws for functions that can fail

## 6. Writing Style

- **Active voice:** "Converts data" not "Data is converted"
- **Direct and functional:** Focus on what functions do, not how sophisticated they are
- **Avoid marketing jargon:** No "enterprise-grade", "fluent API", "cutting-edge", "seamless", etc.
- **Concise descriptions:** Remove unnecessary adjectives and buzzwords
- **Code formatting:** Use backticks for method/function names: `handle` not handle
- **Simple language preferred:**
  - ✅ "Creates a validation handler" not ❌ "Creates a sophisticated validation handler"
  - ✅ "Handles errors" not ❌ "Provides enterprise-grade error handling"
  - ✅ "Processes responses" not ❌ "Seamlessly processes responses with fluent API"

## 7. Complete Documentation Coverage

**CRITICAL REQUIREMENT:** Every single exported function, class, and component across all packages MUST have:

1. **JSDoc Documentation** - Complete with parameters, returns, and examples
2. **README API Entry** - Listed in the API section with full parameter/return documentation

**Coverage Verification:**
- Use `grep -r "export" src/` to find all exports
- Check each export has corresponding JSDoc
- Verify each JSDoc export appears in README API section
- Ensure parameter documentation is complete and matches between JSDoc and README

## 8. Validation Checklist

- [ ] **100% export coverage:** All exported functions/classes have JSDoc and README entries
- [ ] All exports have JSDoc comments with complete documentation
- [ ] All class constructor parameters documented with @param
- [ ] All parameters explicitly listed - no references to other functions
- [ ] Examples compile and use standard libraries only
- [ ] All examples include necessary import statements
- [ ] API section matches JSDoc exactly
- [ ] Parameter names consistent between JSDoc and README
- [ ] Type information accurate
- [ ] Examples demonstrate real-world use cases
- [ ] Language is direct and functional - no marketing jargon
- [ ] Method/function names in descriptions use backticks: `handle` not handle
- [ ] Examples are concise without wrapper functions
- [ ] No peer dependencies sections included
- [ ] No @template sections in README (exclude from API documentation)

## 9. Automation Workflow

1. **Analyze:** `grep -r "export" src/index.ts`
2. **Check JSDoc:** Validate structure and completeness
3. **Generate API:** Extract signatures, map JSDoc tags
4. **Validate:** Ensure examples compile with standard libraries only

## 10. Special Cases

**Overloads:** Multiple headers with combined description
**React Hooks:** Document return structure and lifecycle
**Generics:** Include type constraints and inference behavior
**Errors:** Use `**Throws:** \`ErrorType\` - condition` format
